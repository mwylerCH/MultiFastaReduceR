#!/usr/bin/env Rscript 
# script to select longest variant if locus is annotated multiple time
# PROVISIONAL SCRIPT (no testing, no I/O check, only AA sequence)
args <- commandArgs(TRUE)
MOLECULE <- args[1]
FASTA <- args[2]

# test supplied arguments
if(length(args) != 2){
  stop("Usage: FastaDemultiplexer [MOLECULE] [FASTA]\n\tMOLECULE: 'AA' or 'DNA'\n\tFASTA: path to the MultiFasta file, gzipped or not", call. = F)
}
suppressMessages(suppressWarnings(require(tidyverse)))
suppressMessages(suppressWarnings(require(Biostrings)))
suppressMessages(suppressWarnings(require(seqinr)))

# use MOLUCUEL info
if (MOLECULE == 'DNA'){
  print("Sequences are nucleotides")
  originalFasta <- readDNAStringSet(FASTA)
} else if (MOLECULE == 'AA'){
  print("Sequences are proteins")
  originalFasta <- readAAStringSet(FASTA)
} else {
  stop("Molecule needs to be 'DNA' or 'AA'", call. = F)
}

# file Names
FASTANAME <- gsub("^.*/", "", FASTA)
OUTFASTA <- gsub("fa$",'OneGeneModel.fa', FASTANAME)
OUTFASTA <- gsub("fasta$",'OneGeneModel.fa', OUTFASTA)

# extract name and length
print("Length calculation...")
lunghezza <- as.data.frame(names(originalFasta))
lunghezza$len <- nchar(originalFasta)

# remove version
lunghezza$locus <- gsub("\\.[[:digit:]]+",'', lunghezza$`names(originalFasta)`)
UniqID <- lunghezza %>% 
  group_by(locus) %>% 
  mutate(mostLen = max(len)) %>% 
  filter(len == mostLen) %>% 
  slice_head(n=1)



# subset original fasta for longest
print("Subsetting...")
subsettedFasta <- originalFasta[names(originalFasta) %in% UniqID$`names(originalFasta)`]

# write out
#write.fasta(subsettedFasta, names = names(subsettedFasta), file.out = OUTFASTA, 
#            open = "w", nbchar = 60, as.string = FALSE)
writeXStringSet(subsettedFasta, OUTFASTA, append=FALSE,
                compress=FALSE, compression_level=NA, format="fasta")
print(paste0('Subsetting done, check file ', OUTFASTA))
